---
import Layout from '@layouts/Layout.astro'
import MaterialSymbolsArrowBackRounded from '~icons/material-symbols/arrow-back-rounded'
import MaterialSymbolsFilterAlt from '~icons/material-symbols/filter-alt'
import MaterialSymbolsFilterAltOffOutlineRounded from '~icons/material-symbols/filter-alt-off-outline-rounded'
import MaterialSymbolsChevronLeftRounded from '~icons/material-symbols/chevron-left-rounded'
import MaterialSymbolsChevronRightRounded from '~icons/material-symbols/chevron-right-rounded'
---

<Layout>
  <div class='w-[90%] my-5 mx-auto flex justify-between items-center'>
    <button id='backButton' class='m-5'>
      <MaterialSymbolsArrowBackRounded class:list={'text-[28px]'} />
    </button>
    <input
      type='text'
      id='myInput'
      class='search-input'
      placeholder='Search by Name or Sale Origin...'
    />
    <div class='pagination-buttons items-center'>
      <div class='dropdown'>
        <button id='filterButton' class='dropbtn flex items-center'>
          <MaterialSymbolsFilterAlt /> Filters
        </button>
        <div id='myDropdown' class='dropdown-content'>
          <button id='notPaidPaymentStateFilter'>Not Paid</button>
          <button id='inPaymentPaymentStateFilter'>In Payment</button>
          <button id='partialPaymentStateFilter'>Partial Payment</button>
          <button id='paidPaymentStateFilter'>Paid</button>
          <button id='reversedPaymentStateFilter'>Reversed</button>
          <hr />
          <button id='clearFilter' class='flex items-center'>
            <MaterialSymbolsFilterAltOffOutlineRounded /> Clear Filters
          </button>
        </div>
      </div>
      <p>
        <span id='minCount'>X</span>
        -
        <span id='maxCount'>X</span>
        /
        <span id='invoicesCount'>X</span>
      </p>
      <button id='previousPage'>
        <MaterialSymbolsChevronLeftRounded class:list={'text-[28px]'} />
      </button>
      <button id='nextPage'>
        <MaterialSymbolsChevronRightRounded class:list={'text-[28px]'} />
      </button>
    </div>
  </div>
  <table
    id='invoicesTable'
    class='my-5 mx-auto border-collapse invoices-table sortable'
  >
    <thead class='cursor-pointer'>
      <tr>
        <th>Name</th>
        <th>Origin Documents</th>
        <th>Invoice Date</th>
        <th>Total Amount</th>
        <th>Residual Amount</th>
        <th>State</th>
        <th>Print</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>
  <link
    href='https://cdn.jsdelivr.net/gh/tofsjonas/sortable@latest/sortable.min.css'
    rel='stylesheet'
  />
  <script
    src='https://cdn.jsdelivr.net/gh/tofsjonas/sortable@latest/sortable.min.js'
  ></script>
</Layout>

<style>
  .invoices-table th {
    text-align: center;
    background-color: #fff;
    color: #000;
    font-weight: bold;
    cursor: default;
    padding: 20px;
    border: 1px solid #ddd;
  }

  .search-input {
    display: block;
    margin: 20px auto;
    padding: 15px;
    border-radius: 5px;
    border: 1px solid #000;
    width: 50%;
    font-size: 16px;
  }

  .pagination-buttons {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .dropbtn {
    background-color: #000;
    color: white;
    padding: 20px;
    font-size: 18px;
    border: none;
    cursor: pointer;
  }

  .dropbtn:hover,
  .dropbtn:focus {
    background-color: #333;
  }

  .dropdown-content {
    display: none;
    position: absolute;
    background-color: #fff;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
  }

  .dropdown-content button {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    text-align: left;
    width: 100%;
    border: none;
    background: none;
  }

  .dropdown-content button:hover {
    background-color: #ddd;
  }

  .show {
    display: block;
  }
</style>

<script>
  document.querySelector('#backButton').addEventListener('click', () => {
    window.location.href = '/customer/'
  })

  const customerID = JSON.parse(localStorage.getItem('customer')).customerID
  const partnerID = JSON.parse(localStorage.getItem('user')).partnerId

  const fields = [
    'name',
    'invoice_origin',
    'invoice_date',
    'amount_total_signed',
    'amount_residual',
    'payment_state'
  ]

  let invoicesCount = 0
  let params = [
    ['partner_id', '=', customerID],
    ['partner_agent_ids', '=', partnerID],
    ['state', '=', 'posted'],
    ['invoice_date', '!=', false],
    ['payment_state', 'ilike', ''],
    '|',
    ['name', 'ilike', ''],
    ['invoice_origin', 'ilike', '']
  ]

  const initialParams = [...params]

  function fetchAndDisplayOrders(actualRecord, params, isNew) {
    fetch(import.meta.env.PUBLIC_API + 'invoices', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        isNew: isNew,
        params: params,
        fields: fields,
        offset: actualRecord
      })
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.body.invoicesCount != 0) {
          invoicesCount = data.body.invoicesCount

          if (invoicesCount < 15) {
            document.querySelector('#maxCount').innerHTML =
              invoicesCount.toString()
          } else {
            document.querySelector('#maxCount').innerHTML = '15'
          }

          document.querySelector('#minCount').innerHTML = '1'
          document.querySelector('#invoicesCount').innerHTML =
            invoicesCount.toString()
        }

        const records = data.body.records

        const tbody = document.querySelector(
          '#invoicesTable tbody'
        ) as HTMLTableElement

        tbody.innerHTML = ''

        records.forEach((record) => {
          const row = tbody.insertRow()

          for (let i = 0; i <= fields.length; i++) {
            const cell = row.insertCell()

            cell.style.border = '1px solid #ddd'
            cell.style.padding = '8px'
            cell.style.textAlign = 'center'

            if (i == fields.length) {
              cell.style.cursor = 'pointer'
              cell.innerHTML = '<i class="fa fa-print"></i>'
              cell.addEventListener('click', () => {
                window.open('https://indawsodoo-aromasdelcampo.odoo.com/aromas_reports/2/' + customerID + '/' + record.id, '_blank')
              })
              continue
            }

            let text = record[fields[i]].toString()

            if (text == 'not_paid') {
              text = 'Unpaid'
              cell.style.color = 'red'
            }
            if (text == 'in_payment') {
              text = 'In Payment'
            }
            if (text == 'paid') {
              text = 'Paid'
            }
            if (text == 'partial') {
              text = 'Partially Paid'
            }
            if (text == 'reversed') {
              text = 'Reversed'
            }

            if (text != 'false') {
              if (
                text.includes('-') &&
                text.includes(':') &&
                text.includes(' ')
              ) {
                cell.innerHTML = text.split(' ')[0]
              } else {
                cell.innerHTML = text
              }
            } else {
              cell.innerHTML = '-'
            }

            if (i == 1) {
              cell.style.width = '600px'
            }
          }
        })
      })
      .catch((error) => {
        console.log(error)
      })
  }

  document
    .querySelector('#notPaidPaymentStateFilter')
    .addEventListener('click', () => {
      ;(document.querySelector('#myInput') as HTMLInputElement).value = ''
      params = [...initialParams]
      params[4] = ['payment_state', '=', 'not_paid']
      fetchAndDisplayOrders(0, params, true)
    })

  document
    .querySelector('#inPaymentPaymentStateFilter')
    .addEventListener('click', () => {
      ;(document.querySelector('#myInput') as HTMLInputElement).value = ''
      params = [...initialParams]
      params[4] = ['payment_state', '=', 'in_payment']
      fetchAndDisplayOrders(0, params, true)
    })

  document
    .querySelector('#partialPaymentStateFilter')
    .addEventListener('click', () => {
      ;(document.querySelector('#myInput') as HTMLInputElement).value = ''
      params = [...initialParams]
      params[4] = ['payment_state', '=', 'partial']
      fetchAndDisplayOrders(0, params, true)
    })

  document
    .querySelector('#paidPaymentStateFilter')
    .addEventListener('click', () => {
      ;(document.querySelector('#myInput') as HTMLInputElement).value = ''
      params = [...initialParams]
      params[4] = ['payment_state', '=', 'paid']
      fetchAndDisplayOrders(0, params, true)
    })

  document
    .querySelector('#reversedPaymentStateFilter')
    .addEventListener('click', () => {
      ;(document.querySelector('#myInput') as HTMLInputElement).value = ''
      params = [...initialParams]
      params[4] = ['payment_state', '=', 'reversed']
      fetchAndDisplayOrders(0, params, true)
    })

  document.querySelector('#clearFilter').addEventListener('click', () => {
    ;(document.querySelector('#myInput') as HTMLInputElement).value = ''
    params = [...initialParams]
    fetchAndDisplayOrders(0, params, true)
  })

  document.querySelector('#previousPage').addEventListener('click', () => {
    const maxCount = Number(document.querySelector('#maxCount').innerHTML)
    const minCount = Number(document.querySelector('#minCount').innerHTML)

    if (maxCount <= 15 && invoicesCount <= 15) {
      return
    }

    if (minCount == 1) {
      if (invoicesCount % 15 == 0) {
        fetchAndDisplayOrders(invoicesCount - 15, params, false)
        document.querySelector('#minCount').innerHTML = (
          invoicesCount - 14
        ).toString()
        document.querySelector('#maxCount').innerHTML = invoicesCount.toString()
      } else {
        fetchAndDisplayOrders(
          invoicesCount - (invoicesCount % 15),
          params,
          false
        )
        document.querySelector('#minCount').innerHTML = (
          invoicesCount -
          (invoicesCount % 15) +
          1
        ).toString()
        document.querySelector('#maxCount').innerHTML = invoicesCount.toString()
      }
    } else if (
      maxCount == invoicesCount &&
      minCount == maxCount - (invoicesCount % 15) + 1
    ) {
      fetchAndDisplayOrders(minCount - 16, params, false)
      document.querySelector('#minCount').innerHTML = (minCount - 15).toString()
      document.querySelector('#maxCount').innerHTML = (minCount - 1).toString()
    } else {
      fetchAndDisplayOrders(minCount - 16, params, false)
      document.querySelector('#minCount').innerHTML = (minCount - 15).toString()
      document.querySelector('#maxCount').innerHTML = (maxCount - 15).toString()
    }
  })

  document.querySelector('#nextPage').addEventListener('click', () => {
    const maxCount = Number(document.querySelector('#maxCount').innerHTML)
    const minCount = 1 + maxCount

    if (maxCount <= 15 && invoicesCount <= 15) {
      return
    }

    if (maxCount != invoicesCount) {
      fetchAndDisplayOrders(maxCount, params, false)

      if (maxCount + 15 > invoicesCount) {
        document.querySelector('#maxCount').innerHTML = invoicesCount.toString()
        document.querySelector('#minCount').innerHTML = minCount.toString()
      } else {
        document.querySelector('#maxCount').innerHTML = (
          maxCount + 15
        ).toString()
        document.querySelector('#minCount').innerHTML = minCount.toString()
      }
    } else {
      fetchAndDisplayOrders(0, params, false)
      document.querySelector('#minCount').innerHTML = '1'
      document.querySelector('#maxCount').innerHTML = '15'
    }
  })

  document
    .querySelector('#myInput')
    .addEventListener('keypress', function (event: KeyboardEvent) {
      console.log(params.length)
      if (event.key === 'Enter') {
        const inputValue = (this as HTMLInputElement).value.trim()

        params[6] = ['name', 'ilike', inputValue]
        params[7] = ['invoice_origin', 'ilike', inputValue]
        fetchAndDisplayOrders(0, params, true)
      }
    })

  document.querySelector('#myInput').addEventListener('blur', function (event) {
    if (event.target instanceof HTMLInputElement) {
      const inputValue = (this as HTMLInputElement).value.trim()

      params[6] = ['name', 'ilike', inputValue]
      params[7] = ['invoice_origin', 'ilike', inputValue]
      fetchAndDisplayOrders(0, params, true)
    }
  })

  document.querySelector('#filterButton').addEventListener('click', () => {
    document.getElementById('myDropdown').classList.toggle('show')
  })

  window.onclick = function (event) {
    if (!event.target.matches('.dropbtn')) {
      var dropdowns = document.getElementsByClassName('dropdown-content')
      var i
      for (i = 0; i < dropdowns.length; i++) {
        var openDropdown = dropdowns[i]
        if (openDropdown.classList.contains('show')) {
          openDropdown.classList.remove('show')
        }
      }
    }
  }

  fetchAndDisplayOrders(0, params, true)
</script>
